#!/bin/bash

debug() {
  [ "$DEBUG" != "true" ] && return
  echo -e "[DEBUG] $1"
}

err() {
  echo -e "\n[ERROR] $1\n"
}

debug_hash_table() {
  [ "$DEBUG" != "true" ] && return
  local -n table="$1"
  debug "Hash table:\n"
  for key in "${!table[@]}"; do
    debug "$key : ${table[$key]}\n"
  done
}

json_to_hash_table() {
  local -n hash_table=$1
  shift
  local json_input="$@"

  json_input=$(echo "$json_input" | sed 's/[{}]//g' | tr -d '[:space:]')

  IFS=',' read -ra kv_pairs <<<"$json_input"

  for pair in "${kv_pairs[@]}"; do
    IFS=':' read -r key value <<<"$pair"

    key=$(echo "$key" | sed 's/"//g')
    value=$(echo "$value" | sed 's/"//g')

    hash_table["$key"]="$value"
  done
}

check_num_at_start() {
  if [[ "$1" =~ ^[0-9]+ ]]; then
    err "Environment variable name shouldn't begin with a number: $1"
    return 1
  fi
  return 0
}

convert_keys() {
  local old=$1
  local -n new=$2

  check_num_at_start $old
  [ $? -ne 0 ] && return 1

  new=$(echo "$old" | tr '[:lower:]' '[:upper:]' | tr '-' '_')

  debug "old: $old -> new: $new"
}

export_vars() {
  declare -n table=$1
  local nk
  for key in "${!table[@]}"; do

    convert_keys $key nk
    [ $? -ne 0 ] && continue

    export "$nk=${table[$key]}"
  done
}

handle_envs() {
  json_str="$@"
  [ -z "$json_str" ] && return

  debug "snapctl json:\n$json_str"

  declare -A vars_table
  json_to_hash_table vars_table $json_str
  debug_hash_table vars_table

  export_vars vars_table
}

handle_envfile() {
  local envfile=$1
  [ -z "$envfile" ] && return

  debug "Environment file path: $envfile"

  if [ ! -f "$envfile" ]; then
    err "Environment file not found: $envfile"
    return 1
  fi

  if [ ! -r "$envfile" ]; then
    err "Environment file not readable: $envfile"
    return 1
  fi

  set -a
  source "$envfile"
  set +a
}

extract_json_part() {
  local json="$1"
  local key="$2"
  echo "$json" | grep -oP '(?<="'$key'":{).*?(?=\}(\s|,))' | sed "s/\"$key\"://"
}

extract_value() {
  local json="$1"
  local key="$2"
  echo "$json" | grep -oP '(?<="'$key'":").+?(?=")' | sed "s/\"$key\"://"
}

main() {
  DEBUG=$env_debug
  debug "debug : $DEBUG"

  local app
  if [ -n $app_alias ]; then
    app=$app_alias
  else
    app=$(basename $1) || exit 0
  fi
  debug "App alias: $app"

  debug "Getting all snapctl configurations..."
  snapctl_output=$(snapctl get env envfile apps)
  debug "snapctl output:\n$snapctl_output"

  global_envfile=$(echo "$snapctl_output" | grep -oP '"envfile":\s*"\K[^"]+')

  # global_envfile=$(extract_value "$snapctl_output" "envfile")
  global_env=$(extract_json_part "$snapctl_output" "env")
  app_envfile=$(extract_value "$(echo "$snapctl_output" | grep -oP '(?<="apps":{).*(?=\})')" "$app" | grep -oP '(?<="envfile":").+?(?=")')
  app_env=$(extract_json_part "$(echo "$snapctl_output" | grep -oP '(?<="apps":{).*(?=\})')" "$app" | grep -oP '(?<="env":{).*(?=\})')

  echo "$global_env"
  echo "$global_envfile"
  echo "$app_env"
  echo "$app_envfile"

  debug "global envfile:\n$global_envfile"
  debug "global env vars:\n$global_env"
  debug "app envfile:\n$app_envfile"
  debug "app env vars:\n$app_env"

  debug "Checking for GLOBAL envfile..."
  handle_envfile "$global_envfile"

  debug "Checking for GLOBAL env variables..."
  handle_envs "$global_env"

  debug "Checking for LOCAL envfile..."
  handle_envfile "$app_envfile"

  debug "Checking for LOCAL env variables..."
  handle_envs "$app_env"
}

main $1

exec "$@"
